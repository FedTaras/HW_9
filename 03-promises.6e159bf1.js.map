{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SA0CA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAGpBM,EAAO,CAAEP,WAAUC,S,GAGpBA,E,IAISQ,SAASC,cAAc,SAE/BC,iBAAiB,UAEzB,SAAkBC,GAChBA,EAAGC,iBAOH,IALA,IAAIC,EAAW,EACXC,EAAQC,OAAOJ,EAAGK,OAAOhB,MAAMiB,OAC7BC,EAAOH,OAAOJ,EAAGK,OAAOE,KAAKD,OAC7BE,EAASJ,OAAOJ,EAAGK,OAAOG,OAAOF,OAE9BG,EAAI,EAAGA,GAAKD,EAAQC,IAC3BtB,EAAce,EAAUC,GACrBO,MAAK,SAAAC,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MACjBJ,EAAA2B,OAAOC,QAAQ,uBAAwCC,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,O,IAE9D0B,OAAM,SAAAJ,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MAClBJ,EAAA2B,OAAOI,QAAQ,sBAAqCF,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,O,IAG9Da,IACAC,GAASI,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix';\n\n// const ref = {\n//   form: document.querySelector('.form'),\n//   // submitBtn: document.querySelector('button'),\n//   delay: document.querySelector('input[name=\"delay\"]'),\n//   step: document.querySelector('input[name=\"step\"]'),\n//   amount: document.querySelector('input[name=\"amount\"]'),\n// };\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n\n//   if (shouldResolve) {\n//     // Fulfill\n//     Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   } else {\n//     // Reject\n//     Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n//   }\n// }\n\n// ref.form.addEventListener('submit', onBtnSubmitFn);\n\n// function onBtnSubmitFn(evt) {\n//   evt.preventDefault();\n\n//   const delay = Number(ref.delay.value);\n\n//   setTimeout(() => {\n//     for (\n//       let i = 1, j = delay;\n//       i <= ref.amount.value;\n//       i++, j = j + Number(ref.step.value)\n//     ) {\n//       setTimeout(() => {\n//         createPromise(i, j);\n//       }, j);\n//     }\n//   }, delay);\n// }\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n        // Fulfill\n      } else {\n        reject({ position, delay });\n        // Reject\n      }\n    }, delay);\n  });\n}\n\nconst formRef = document.querySelector('.form');\n\nformRef.addEventListener('submit', onSubmit);\n\nfunction onSubmit(ev) {\n  ev.preventDefault();\n\n  let position = 1;\n  let delay = Number(ev.target.delay.value);\n  const step = Number(ev.target.step.value);\n  const amount = Number(ev.target.amount.value);\n\n  for (let i = 1; i <= amount; i++) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay} ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay} ms`);\n      });\n\n    position++;\n    delay += step;\n  }\n  // ev.currentTarget.reset();\n}\n"],"names":["$ejkSG","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","ev","preventDefault","position1","delay1","Number","target","value","step","amount","i","then","param","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.6e159bf1.js.map"}